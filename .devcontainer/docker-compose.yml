version: "3"

services:
  app:
    image: mcr.microsoft.com/devcontainers/base:ubuntu-24.04
    userns_mode: keep-id
    security_opt:
      - label=disable
    volumes:
      - ../:/workspaces:cached
    command: sleep infinity
    networks:
      - playground

  postgres:
    image: docker.io/library/postgres:17-alpine
    ports:
      - '5432:5432'
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -q
        - -d
        - postgres
        - -U
        - postgres
      retries: 3
      timeout: 5s
    networks:
      - playground

  redis:
    image: docker.io/library/redis:7.2.4-alpine
    ports:
      - '6379:6379'
    volumes:
      - 'redis-data:/data'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      retries: 3
      timeout: 5s
    networks:
      - playground

  minio:
    image: docker.io/minio/minio:RELEASE.2025-01-18T00-31-37Z
    ports:
      - '9000:9000'
      - '8900:8900'
    volumes:
      - 'minio-data:/data/minio'
    environment:
      MINIO_ROOT_USER: miniosudo
      MINIO_ROOT_PASSWORD: miniosudo
    command: minio server /data/minio --console-address ":8900"
    healthcheck:
      test:
        - CMD
        - curl
        - -f
        - http://127.0.0.1:9000/minio/health/live
      retries: 3
      timeout: 5s
    networks:
      - playground

  minio-client:
    image: docker.io/minio/mc:RELEASE.2025-01-17T23-25-50Z
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set s3 http://minio:9000 miniosudo miniosudo;
      /usr/bin/mc rm -r --force s3/local;
      /usr/bin/mc mb s3/local;
      /usr/bin/mc rm -r --force s3/loki;
      /usr/bin/mc mb s3/loki;
      /usr/bin/mc rm -r --force s3/tempo;
      /usr/bin/mc mb s3/tempo;
      exit 0;
      "
    restart: on-failure
    networks:
      - playground
    depends_on:
      minio:
        condition: service_healthy

  # mailhog:
  #   image: docker.io/mailhog/mailhog:v1.0.0
  #   ports:
  #     - '${MAILHOG_PORT:-1025}:1025'
  #     - '${MAILHOG_DASHBOARD_PORT:-8025}:8025'
  #   volumes:
  #     - ../config:/.config
  #   environment:
  #     - MH_AUTH_FILE="/.config/mailhog/auth"
  #   networks:
  #     - playground

  mailslurper:
    image: docker.io/oryd/mailslurper:latest-smtps
    ports:
      - '4436:4436'
      - '4437:4437'
    networks:
      - playground

  postgres-kratos:
    image: docker.io/library/postgres:17-alpine
    ports:
      - '5431:5432'
    volumes:
      - 'kratos-postgres:/var/lib/postgresql/data'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test:
        - CMD
        - pg_isready
        - -q
        - -d
        - postgres
        - -U
        - postgres
      retries: 3
      timeout: 5s
    networks:
      - playground

  kratos-migrate:
    image: docker.io/oryd/kratos:v1
    environment:
      - DSN=postgres://postgres:postgres@postgres-kratos:5432/postgres?sslmode=disable&max_conns=20&max_idle_conns=4
    volumes:
      - type: bind
        source: ../config/kratos/email-password
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - playground
    depends_on:
      postgres-kratos:
        condition: service_healthy

  kratos:
    image: docker.io/oryd/kratos:v1
    ports:
      - 4433:4433 # public
      - 4434:4434 # admin
    restart: unless-stopped
    environment:
      - DSN=postgres://postgres:postgres@postgres-kratos:5432/postgres?sslmode=disable&max_conns=20&max_idle_conns=4
      - LOG_LEVEL=trace
      - SERVE_PUBLIC_BASE_URL=http://127.0.0.1:4455/.ory/kratos/public/
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - type: bind
        source: ../config/kratos/email-password
        target: /etc/config/kratos
    networks:
      - playground
    depends_on:
      - kratos-migrate

  kratos-selfservice-ui-node:
    image: docker.io/oryd/kratos-selfservice-ui-node:v0.13.0-20
    restart: on-failure
    ports:
      - 4435:4435
    environment:
      - PORT=4435
      - KRATOS_BROWSER_URL=http://127.0.0.1:4455/.ory/kratos/public
      - JWKS_URL=http://oathkeeper:4456/.well-known/jwks.json
      - SECURITY_MODE=jwks
      - COOKIE_SECRET=playground12345
      - CSRF_COOKIE_NAME=__locahost-example.com-x-csrf-token
      - CSRF_COOKIE_SECRET=playground12345
      - KRATOS_PUBLIC_URL=http://kratos:4433/
    networks:
      - playground
    depends_on:
      - kratos

  oathkeeper:
    image: docker.io/oryd/oathkeeper:v0
    ports:
      - 4455:4455
      - 4456:4456
    command:
      serve proxy -c "/etc/config/oathkeeper/oathkeeper.yml"
    environment:
      - LOG_LEVEL=debug
    restart: on-failure
    volumes:
      - ../config/oathkeeper:/etc/config/oathkeeper
    networks:
      - playground
    depends_on:
      - kratos

  loki:
    image: docker.io/grafana/loki:3.3.2
    ports:
      - 3100:3100
    command:
      - -config.file=/etc/loki/loki.yml
    restart: on-failure
    volumes:
      - ../config/loki:/etc/loki
    healthcheck:
      test: wget --quiet --tries=1 --output-document=- http://localhost:3100/ready | grep -q -w ready || exit 1
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - playground
    depends_on:
      minio:
        condition: service_healthy

  tempo:
    image: docker.io/grafana/tempo:2.7.0
    ports:
      - 3200:3200
      - 4327:4317
    command:
      - -config.file=/etc/tempo/tempo.yml
    restart: on-failure
    volumes:
      - ../config/tempo:/etc/tempo
    networks:
      - playground
    depends_on:
      minio:
        condition: service_healthy

  prometheus:
    image: docker.io/prom/prometheus:v3.1.0
    command:
      - --enable-feature=native-histograms
      - --web.enable-otlp-receiver
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    restart: on-failure
    volumes:
      - ../config/prometheus:/etc/prometheus
    ports:
      - 9090:9090
    networks:
      - playground
    depends_on:
      - minio

  alloy:
    image: docker.io/grafana/alloy:v1.6.1
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    volumes:
      - ../config/alloy/config.alloy:/etc/alloy/config.alloy
    ports:
      - 12345:12345
      - 4317:4317
      - 4318:4318
    networks:
      - playground
    depends_on:
      - loki
      - tempo
      - prometheus

  grafana:
    image: docker.io/grafana/grafana:11.5.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    restart: on-failure
    volumes:
      - ../config/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    ports:
      - 3030:3000
    networks:
      - playground
    depends_on:
      - alloy

volumes:
  postgres-data:
  redis-data:
  minio-data:
  kratos-postgres:
networks:
  playground:
